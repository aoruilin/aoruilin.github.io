<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>基于Python+selenium的UI自动化测试指南</title>
    <link href="/posts/973aa772/"/>
    <url>/posts/973aa772/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-amp-selenium自动化测试"><a href="#Python-amp-selenium自动化测试" class="headerlink" title="Python&amp;selenium自动化测试"></a>Python&amp;selenium自动化测试</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><em>本篇将介绍如何使用<code>Python</code>和<code>selenium</code>，从编写你的第一个测试脚本到创建一个web端的UI自动化测试项目。主要针对刚开始或准备接触自动化测试的人，我们假设你已经拥有了基本的Python技能并且有一些面向对象编程的经验，那么这篇文章应该会对你有所帮助。</em></p><hr><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><blockquote><p>在开始前，我们先来了解一下一条自动化脚本是如何运作的，如果预先了解过或者见过自动化脚本运行效果就会知道，其实就是通过我们编写的代码运行后使浏览器去执行我们制定的各种操作步骤。这个场景就和坐出租车一样，乘客告诉司机要去哪，司机按照乘客的要求开车把我们送到目的地，在这里我们就是乘客，现在我们需要的就是<strong>司机</strong>和<strong>车</strong>。</p></blockquote><h3 id="1-浏览器"><a href="#1-浏览器" class="headerlink" title="1.浏览器"></a>1.浏览器</h3><blockquote><p>浏览器就是我们需要的<strong>车</strong>，一个web端项目在开发、调试、测试的过程中主要使用的浏览器就是chrome和Firefox了，我们主要介绍一下这两个浏览器。</p></blockquote><ul><li><p><strong>chrome</strong><br>在写这篇文章时chrome稳定版已经更新到81的版本了，最新版本前两天刚踩了坑，所以推荐使用60-79范围中的版本，因为我们需要一个稳定的运行环境，而且我们做的是自动化测试，不需要考虑兼容性测试。<br>这里肯定有人会问，chrome有自动更新啊！解决方法有几种，但我不保证对你就有用（手动狗头）。</p><ul><li>a.打开C:\Program Files (x86)\Google，强行删除Update目录</li><li>b.安装的时候把网断掉</li></ul><p>以上的方法都能用一段时间，如果它还是自己更新了，emmmmm…删掉重新再装一次那个版本吧，所以最好把浏览器安装包统一管理起来，一是好找，二是如果要测兼容也可以派上用场。</p></li><li><p><strong>Firefox</strong><br>推荐使用55以后的版本，Firefox关闭自动更新就很简单了，只需要几步，在设置中找到高级，点到更新后选择不检查更新，搞定~</p></li></ul><h3 id="2-浏览器驱动"><a href="#2-浏览器驱动" class="headerlink" title="2.浏览器驱动"></a>2.浏览器驱动</h3><blockquote><p>现在我们有了车，需要的就剩<strong>司机</strong>了，但是就像出租车和司机都有自己对应的出租车公司一样，浏览器和浏览器驱动也需要对号入座，而且每一个浏览器驱动的版本也需要和特定的几个浏览器版本对应。</p></blockquote><ul><li><p><strong>chromedriver</strong><br>chromedriver是chrome浏览器指定的驱动，按照之前推荐的浏览器版本，我们需要下载一个对应的驱动版本，版本对照如下图：<br><img src="https://i.loli.net/2020/04/21/TtESH41G8Pdyi7K.png" srcset="/img/loading.gif" alt="llqdz (2).png"></p><p>最近较新的chrome版本也会有单独对应的驱动版本，我们可以根据安装的chrome版本<a href="https://npm.taobao.org/mirrors/chromedriver/" target="_blank" rel="noopener">下载</a>对应的驱动</p></li></ul><ul><li><strong>geckodriver</strong><br>geckodriver是Firefox浏览器指定的驱动，最新版本的Firefox我暂时还没踩到坑，所以对应的浏览器驱动版本我们也可以<a href="https://npm.taobao.org/mirrors/geckodriver/v0.26.0/" target="_blank" rel="noopener">下载</a>最新的。</li></ul><blockquote><p>至于其他的浏览器驱动比如IE的IEDriverServer，IE呢……emmmm……你们应该懂的。</p></blockquote><p><strong>驱动下载好后是一个<code>.exe</code>文件，我们可以把所有的驱动文件放到一个<code>driver</code>文件夹中，再将这个文件夹的路径添加到系统变量<code>Path</code>中。</strong></p><blockquote><p>如果觉得太麻烦也有偷懒的方法，直接把文件放到一个文件夹中，然后丢到你的Python安装目录下就行了。。</p></blockquote><p><em>至此，我们的环境就搭建好了，总结一下的话基本只需要把浏览器和对应的驱动弄好就完成了。</em></p><hr><h2 id="selenium"><a href="#selenium" class="headerlink" title="selenium"></a>selenium</h2><blockquote><p><em>在开始写代码之前不要忘了还需要在<strong>Python环境</strong>中安装<code>selenium</code>，我们之后在网页上的所有操作都会通过它来实现。</em></p></blockquote><p>selenium简介<br></p><details><br><summary>selenium是…</summary><p></p><blockquote><p>selenium是一个涵盖了一系列工具和库的总体项目，这些工具和库支持Web浏览器的自动化。它提供了扩展，以模拟用户与浏览器的交互，用于扩展浏览器分配的分发服务器，以及用于实现W3C WebDriver规范的基础结构 ，使你可以为所有主要的Web浏览器编写可互换的代码。Selenium的核心是WebDriver，它是编写可以在许多浏览器中互换运行的指令集的接口。<br></p></blockquote></details><p></p><h4 id="安装selenium"><a href="#安装selenium" class="headerlink" title="安装selenium"></a>安装<code>selenium</code></h4><pre><code class="bash">  pip install selenium</code></pre><blockquote><p>selenium支持多个浏览器，支持分布式运行且支持多种语言开发，能完成网页上的大部分操作，但是一些非网页操作比如文件上传操作，打开一个Windows资源管理器窗口选择上传的文件，这种操作是selenium无法完成的。</p></blockquote><h4 id="selenium的webdriver"><a href="#selenium的webdriver" class="headerlink" title="selenium的webdriver"></a>selenium的<code>webdriver</code></h4><p>webdriver是selenium的核心，我们主要通过调用它的API来实现在浏览器的各种操作，打开selenium目录就会看到如下：</p><pre><code> ├─common ├─webdriver</code></pre><p>common中主要包含了各个<code>Exception</code>类，主要用法我们之后介绍。我们再看一看webdriver的目录：</p><pre><code>├─android├─blackberry├─chrome├─common├─edge├─firefox├─ie├─opera├─phantomjs├─remote├─safari├─support├─webkitgtk</code></pre><p>从这里我们就可以看出我们可以使用哪些浏览器来做自动化测试了，在本文中会主要使用<code>chrome</code>来完成。</p><h2 id="My-First-Script"><a href="#My-First-Script" class="headerlink" title="My First Script"></a>My First Script</h2><blockquote><p><em>我们已经完成了所有的准备工作，接下来我们就开始写代码吧~</em></p></blockquote><p><strong>先来看一个demo</strong></p><pre><code class="python">from selenium import webdriverdriver = webdriver.Chrome()  # 实例化一个driver对象，打开Chrome浏览器driver.get(&#39;https://www.baidu.com&#39;)  # 访问百度driver.find_element_by_id(&#39;kw&#39;).send_keys(&#39;python&#39;)  # 在搜索输入框输入driver.find_element_by_id(&#39;su&#39;).click()  # 点击搜索driver.close()  # 关闭浏览器，释放资源</code></pre><p>我们先不看代码的部分，直接运行这个demo我们可以看到整个的操作和代码中的<strong>注释</strong>中描述的一样，如果你觉得操作的太快看不清楚的话可以在各个操作中间加上<strong>等待</strong>，就像这样：</p><blockquote><p>等待的操作在自动化测试中是很必要的，selenium的等待方式有3种，这里我们先介绍强制等待</p></blockquote><pre><code class="python">import timefrom selenium import webdriverdriver = webdriver.Chrome()driver.get(&#39;https://www.baidu.com&#39;)time.sleep(2)  # 强制等待2秒driver.find_element_by_id(&#39;kw&#39;).send_keys(&#39;python&#39;)</code></pre><p>在你想要停顿的地方插入等待的代码后再次运行demo就会看到你想要的效果了。</p><p><strong>那么，这些操作到底是怎么做到的呢？</strong></p><ul><li>同样是出租车的例子，我们作为乘客下达指令，司机开车到达目的地。这里我们需要思考一下我们要通过什么告诉司机我们要去的具体位置呢？</li></ul><p><strong>下面我们需要了解的就是selenium识别网页页面元素的方法了！</strong></p><h3 id="页面元素定位的方法"><a href="#页面元素定位的方法" class="headerlink" title="页面元素定位的方法"></a>页面元素定位的方法</h3><blockquote><p>selenium的识别原理是通过元素的一个唯一的属性和属性值去HTML页面中定位和识别元素，我们可以通过标签的id、name、class属性或者标签的名称等方法定位到我们想定位的元素位置，然后传入webdriver的方法中取做各种操作。</p></blockquote><h4 id="selenium的元素定位方法有以下几种："><a href="#selenium的元素定位方法有以下几种：" class="headerlink" title="selenium的元素定位方法有以下几种："></a>selenium的元素定位方法有以下几种：</h4><pre><code>find_element_by_id() 通过id属性find_element_by_name() 通过name属性find_element_by_tag_name() 通过标签名称find_element_by_class_name() 通过属性的值find_element_by_link_text() 通过超链接文本find_element_by_partial_link_text() 通过超链接文本find_element_by_xpath() 通过xpath表达式find_element_by_css_selector() 通过css表达式</code></pre><p>这些方法传入的</p><ul><li><p><strong>第一步</strong><br>在浏览器中打开<strong>开发者工具</strong>（以下操作都使用chrome实现，就是F12），在左上角有鼠标样式的图标，点它之后再去页面中点击你想定位的元素，如下图：</p><p><img src="https://i.loli.net/2020/04/25/3R6PfYQZp5bKBi9.png" srcset="/img/loading.gif" alt="baidu_dingwei.png"></p><p>这里能看到输入框的input标签中，id、name、class属性都有，这里我们需要判断这些属性是否是<strong>唯一</strong>的，非常简单，将标签中的属性双击后复制出来用<code>Ctrl + F</code>搜索一下就能看到了，就像下图一样：</p><p><img src="https://i.loli.net/2020/04/25/pckYugHG7n1LN35.png" srcset="/img/loading.gif" alt="baidu_ysdingwei.png"></p><blockquote><p>这里搜索结果需要注意的是如果搜索结果在全局样式的代码中的话，我们可以忽略这个结果，只查看页面标签中的搜索结果是不是唯一的。</p></blockquote><p>这里的<code>kw</code>是这个input标签的<code>id</code>，我们再回顾一下之前demo中的代码：</p><pre><code class="python">driver.find_element_by_id(&#39;kw&#39;).send_keys(&#39;python&#39;)</code></pre><p>我们在实例化webdriver的对象后，通过调用它的<code>find_element_by_id()</code>方法并传入input标签的id属性<code>kw</code>，然后使用<code>send_keys()</code>方法输入我们想输入的内容，这样就完成了一次输入操作了。</p></li></ul><p>除了<code>find_element_by_id()</code>，还有其他的</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>自动化测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>selenium</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
